C251 COMPILER V5.60.0,  main                                                               15/01/25  10:48:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE usr\main.c XSMALL INTR2 BROWSE DEBUG PRINT(.\Listings\main.lst) OBJECT
                    -(.\Objects\main.obj) 

stmt  level    source

    1          #include        "\..\library\config.h"
    2          #include        "\..\library\STC32G_GPIO.h"
    3          #include        "\..\library\STC32G_Delay.h"
    4          #include        "\..\library\STC32G_UART.h"
    5          //#include      "\..\library\STC32G_ADC.h"
    6          #include        "\..\library\STC32G_PWM.h"
    7          #include        "\..\library\STC32G_NVIC.h"//中断
    8          #include        "\..\library\STC32G_Switch.h"//功能脚切换
    9          //#include   "gpio_interrupt.h"
   10          //#include   "ebf_control.h"
   11          #include    "ntc_sampling.h"
   12          #include    "io_status.h"
   13          
   14          
   15          //下载时, 选择时钟 12MHz (可以在配置文件"config.h"中修改).
   16          
   17          /*************  本地常量声明    **************/
   18          
   19          
   20          
   21          
   22          /*************  本地变量声明    **************/
   23          
   24          PWMx_Duty PWMA_Duty;
   25          bit PWM1_Flag;
   26          float set_wendu;
   27          float ntc_wendu;
   28          u8 switch_data;
   29          u32 data1;//p3-p0
   30          u32 data2;//p7-p4
   31          /*************  本地函数声明    **************/
   32          void    PWM_config(u16 Fre);
   33          void    UART_config(void);
   34          void    GPIO_config(void);
   35          void    controlbeep(void);
   36          float    NTC_ADC_convert(u8 chn);
   37          void    temp_control_switch(void);
   38          /*************  外部函数和变量声明 *****************/
   39          
   40          
   41          
   42          //========================================================================
   43          // 函数: main
   44          // 描述: 用户应用程序.
   45          // 参数: None.
   46          // 返回: None.
   47          // 版本: V1.0, 2020-09-23
   48          //========================================================================
   49          void main(void)
   50          {
   51   1      //      u8      i;
   52   1      //      u16     j;
   53   1              
   54   1      
   55   1              WTST = 0;               //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
   56   1              EAXSFR();               //扩展SFR(XFR)访问使能 
   57   1              CKCON = 0;      //提高访问XRAM速度
   58   1      
C251 COMPILER V5.60.0,  main                                                               15/01/25  10:48:06  PAGE 2   

   59   1              GPIO_config();
   60   1              UART_config();
   61   1              ADC_config();
   62   1              EA = 1;
   63   1      
   64   1              set_wendu=0.0;
   65   1              switch_data=0;
   66   1              data1 = 0x00000000;
   67   1              data2 = 0x00000000;
   68   1              printf("河南南都汽车电子53针振动测试\r\n");     //UART发送一个字符串
   69   1              
   70   1              while(1)
   71   1              {
   72   2                      delay_ms(500);
   73   2                      
   74   2                      read_iostatus();
   75   2                      printf("DATA:%lx:%lx\r\n",data1,data2); 
   76   2      //              printf("P40:%lx  \r\n",P40);    
   77   2                      //temp_control_switch();
   78   2              }
   79   1      }
   80          
   81          
   82          
   83          //      P1_MODE_IN_HIZ(GPIO_Pin_5);             //P1.5设置为高阻输入
   84          //P1_MODE_IN_HIZ(GPIO_Pin_All);         //P1.0~P1.7 设置为高阻输入
   85          //      P0_MODE_IN_HIZ(GPIO_Pin_LOW | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);    //P0.0~P0.6 设置为高阻输入
   86          //      P1_MODE_IN_HIZ(GPIO_Pin_All);           //P1.0~P1.7 设置为高阻输入
   87          //      P3_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1); //P3.0,P3.1 设置为准双向口
   88          //（启动PWM功能后输出脚自动设置为准双向口模式）
   89          
   90          /******************* IO配置函数 *******************/
   91          void    GPIO_config(void)
   92          {
   93   1      //      P0_MODE_IO_PU(GPIO_Pin_All);//准双向口
   94   1      //      P1_MODE_IO_PU(GPIO_Pin_All);
   95   1      //      P2_MODE_IO_PU(GPIO_Pin_All);
   96   1      //      P2_MODE_IO_PU(GPIO_Pin_All);
   97   1      //      P3_MODE_IO_PU(GPIO_Pin_All);
   98   1      //      P4_MODE_IO_PU(GPIO_Pin_All);
   99   1      //      P5_MODE_IO_PU(GPIO_Pin_All);
  100   1      //      P6_MODE_IO_PU(GPIO_Pin_All);
  101   1      //      P7_MODE_IO_PU(GPIO_Pin_All);
  102   1              
  103   1              P0_MODE_IN_HIZ(GPIO_Pin_All);//高阻输入
  104   1              P1_MODE_IN_HIZ(GPIO_Pin_All);
  105   1              P2_MODE_IN_HIZ(GPIO_Pin_All);
  106   1              P3_MODE_IN_HIZ(GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_HIGH);
  107   1              P4_MODE_IN_HIZ(GPIO_Pin_All);
  108   1              P5_MODE_IN_HIZ(GPIO_Pin_All);
  109   1              P6_MODE_IN_HIZ(GPIO_Pin_All);
  110   1              P7_MODE_IN_HIZ(GPIO_Pin_All);
  111   1              P3_MODE_IO_PU(GPIO_Pin_0 | GPIO_Pin_1); //P3.0,P3.1 设置为准双向口
  112   1      }
  113          
  114          /***************  串口初始化函数 *****************/
  115          void    UART_config(void)
  116          {
  117   1              COMx_InitDefine         COMx_InitStructure;                                     //结构定义
  118   1              COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;             //模式,   UART_ShiftRight,UART_8bit_BRTx,UART_9bit,
             -UART_9bit_BRTx
  119   1              COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;                 //选择波特率发生器, BRT_Timer1,BRT_Timer2 (注意: 串口2
             -固定使用BRT_Timer2)
  120   1              COMx_InitStructure.UART_BaudRate  = 115200ul;                   //波特率,     110 ~ 115200
  121   1              COMx_InitStructure.UART_RxEnable  = ENABLE;                             //接收允许,   ENABLE或DISABLE
  122   1              UART_Configuration(UART1, &COMx_InitStructure);         //初始化串口 UART1,UART2,UART3,UART4
C251 COMPILER V5.60.0,  main                                                               15/01/25  10:48:06  PAGE 3   

  123   1              NVIC_UART1_Init(ENABLE,Priority_1);             //中断使能, ENABLE/DISABLE; 优先级(低到高) Priority_0,Priority_1,Pr
             -iority_2,Priority_3
  124   1      
  125   1              UART1_SW(UART1_SW_P30_P31);             //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  126   1      }
  127          
  128          /***************  PWM初始化函数 *****************/
  129          void    PWM_config(u16 Fre)
  130          {
  131   1              PWMx_InitDefine         PWMx_InitStructure;
  132   1              
  133   1              PWMx_InitStructure.PWM_Period   = Fre;                                                  //周期时间,   0~65535
  134   1              PWMA_Duty.PWM1_Duty = PWMx_InitStructure.PWM_Period / 2;
  135   1      
  136   1              PWMx_InitStructure.PWM_Mode    =        CCMRn_PWM_MODE1;        //模式,         CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_IN
             -VALID,CCMRn_ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  137   1              PWMx_InitStructure.PWM_Duty    = PWMA_Duty.PWM1_Duty;   //PWM占空比时间, 0~Period
  138   1              PWMx_InitStructure.PWM_EnoSelect   = ENO1P;
  139   1              PWM_Configuration(PWM1, &PWMx_InitStructure);                           //初始化PWM1
  140   1      
  141   1              PWMx_InitStructure.PWM_DeadTime = 0;                                                            //死区发生器设置, 0~255
  142   1              PWMx_InitStructure.PWM_MainOutEnable= ENABLE;                           //主输出使能, ENABLE,DISABLE
  143   1              PWMx_InitStructure.PWM_CEN_Enable   = ENABLE;                           //使能计数器, ENABLE,DISABLE
  144   1              PWM_Configuration(PWMA, &PWMx_InitStructure);                           //初始化PWM通用寄存器,  PWMA,PWMB
  145   1              
  146   1              
  147   1              PWM1_USE_P10P11();
  148   1      
  149   1              NVIC_PWM_Init(PWMA,DISABLE,Priority_0);
  150   1      
  151   1      }
  152          
  153          void    temp_control_switch()
  154          {
  155   1                      ntc_wendu = NTC_ADC_convert(5);         //发送固定通道AD值
  156   1                      printf("NTC测量温度为%f °C\r\n",ntc_wendu);
  157   1                      if(ntc_wendu<-70.0) 
  158   1                      {
  159   2                              printf("没有ntc接入的状态，关闭继电器\r\n");
  160   2                              P14=0;
  161   2                              return;
  162   2                      }
  163   1      //              printf("one_key:%hd\r\n",one_key);
  164   1      //              printf("two_key:%hd\r\n",two_key);
  165   1      //              printf("three_key:%hd\r\n",three_key);
  166   1      //              printf("four_key:%hd\r\n",four_key);
  167   1      //              printf("mode_key:%hd\r\n",mode_key);
  168   1      //              P14 = ~P14;
  169   1      //              P14=0;
  170   1      //              printf("P14:%hd\r\n",P14);
  171   1      //      if(mode_key==0) switch_data |= 0x10;
  172   1      //              else switch_data &= 0x0F;
  173   1              if(one_key==0) switch_data |= 0x8;
  174   1                      else switch_data &= 0x7;
  175   1              if(two_key==0) switch_data |= 0x4;
  176   1                      else switch_data &= 0xB;
  177   1              if(three_key==0) switch_data |= 0x2;
  178   1                      else switch_data &= 0xD;
  179   1              if(four_key==0) switch_data |= 0x1;
  180   1                      else switch_data &= 0xE;
  181   1              printf("switch_data:%x\r\n",switch_data);
  182   1              
  183   1              if(switch_data ==0x0 ) set_wendu=-15.0;//1
  184   1              else if(switch_data ==0x1 ) set_wendu=-10.0;//2
  185   1              else if(switch_data ==0x2 ) set_wendu=-5.0;//3
  186   1              else if(switch_data ==0x3 ) set_wendu=0.0;//4
C251 COMPILER V5.60.0,  main                                                               15/01/25  10:48:06  PAGE 4   

  187   1              else if(switch_data ==0x4 ) set_wendu=5.0;//5
  188   1              else if(switch_data ==0x5 ) set_wendu=10.0;//6
  189   1              else if(switch_data ==0x6 ) set_wendu=15.0;//7
  190   1              else if(switch_data ==0x7 ) set_wendu=20.0;//8
  191   1              else if(switch_data ==0x8 ) set_wendu=25.0;//9
  192   1              else if(switch_data ==0x9 ) set_wendu=30.0;//10
  193   1              else if(switch_data ==0xa ) set_wendu=35.0;//11
  194   1              else if(switch_data ==0xb ) set_wendu=40.0;//12
  195   1              else if(switch_data ==0xc ) set_wendu=45.0;//13
  196   1              else if(switch_data ==0xd ) set_wendu=50.0;//14
  197   1              else if(switch_data ==0xe ) set_wendu=60.0;//15
  198   1              else if(switch_data ==0xf ) set_wendu=70.0;//16
  199   1              printf("设定温度为%f °C\r\n",set_wendu);
  200   1              
  201   1              if(mode_key==0)//拨到下是加热模式
  202   1              {
  203   2                      printf("加热模式\r\n");
  204   2                      if(ntc_wendu<set_wendu) P14=1;
  205   2                      else P14=0;
  206   2              }
  207   1              else if(mode_key==1)//拨到上是降温模式
  208   1              {
  209   2                      printf("降温模式\r\n");
  210   2                      if(ntc_wendu>set_wendu) P14=1;
  211   2                      else P14=0;
  212   2              }
  213   1      }
  214          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       757     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        33         18
  bit size             =         1     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       158     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
